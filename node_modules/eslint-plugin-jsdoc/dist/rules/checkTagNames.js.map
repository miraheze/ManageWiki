{"version":3,"sources":["../../src/rules/checkTagNames.js"],"names":["jsxTagNames","Set","sourceCode","jsdoc","report","utils","context","settings","jsdocNode","definedTags","jsxTags","options","definedPreferredTags","tagNamePreference","structuredTags","definedStructuredTags","Object","keys","definedNonPreferredTags","length","values","map","preferredTag","undefined","reportSettings","replacement","filter","preferredType","tags","forEach","jsdocTag","tagName","tag","has","isValidTag","preferredTagName","getPreferredTagName","allowObjectReturn","defaultMessage","message","fixer","getText","replace","RegExp","_","escapeRegExp","replaceText","iterateAllJsdocs","meta","docs","description","url","fixable","schema","additionalProperties","properties","items","type"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\n// https://babeljs.io/docs/en/babel-plugin-transform-react-jsx/\nconst jsxTagNames = new Set([\n  'jsx',\n  'jsxFrag',\n  'jsxImportSource',\n  'jsxRuntime',\n]);\n\nexport default iterateJsdoc(({\n  sourceCode,\n  jsdoc,\n  report,\n  utils,\n  context,\n  settings,\n  jsdocNode,\n}) => {\n  const {definedTags = [], jsxTags} = context.options[0] || {};\n\n  let definedPreferredTags = [];\n  const {tagNamePreference, structuredTags} = settings;\n  const definedStructuredTags = Object.keys(structuredTags);\n  const definedNonPreferredTags = Object.keys(tagNamePreference);\n  if (definedNonPreferredTags.length) {\n    definedPreferredTags = Object.values(tagNamePreference).map((preferredTag) => {\n      if (typeof preferredTag === 'string') {\n        // May become an empty string but will be filtered out below\n        return preferredTag;\n      }\n      if (!preferredTag) {\n        return undefined;\n      }\n      if (typeof preferredTag !== 'object') {\n        utils.reportSettings(\n          'Invalid `settings.jsdoc.tagNamePreference`. Values must be falsy, a string, or an object.',\n        );\n      }\n\n      return preferredTag.replacement;\n    }).filter((preferredType) => {\n      return preferredType;\n    });\n  }\n\n  jsdoc.tags.forEach((jsdocTag) => {\n    const tagName = jsdocTag.tag;\n    if (jsxTags && jsxTagNames.has(tagName)) {\n      return;\n    }\n    if (utils.isValidTag(tagName, [\n      ...definedTags, ...definedPreferredTags, ...definedNonPreferredTags,\n      ...definedStructuredTags,\n    ])) {\n      let preferredTagName = utils.getPreferredTagName({\n        allowObjectReturn: true,\n        defaultMessage: `Blacklisted tag found (\\`@${tagName}\\`)`,\n        tagName,\n      });\n      if (!preferredTagName) {\n        return;\n      }\n\n      let message;\n      if (typeof preferredTagName === 'object') {\n        ({message, replacement: preferredTagName} = preferredTagName);\n      }\n      if (!message) {\n        message = `Invalid JSDoc tag (preference). Replace \"${tagName}\" JSDoc tag with \"${preferredTagName}\".`;\n      }\n\n      if (preferredTagName !== tagName) {\n        report(message, (fixer) => {\n          const replacement = sourceCode.getText(jsdocNode).replace(\n            new RegExp(`@${_.escapeRegExp(tagName)}\\\\b`, 'u'),\n            `@${preferredTagName}`,\n          );\n\n          return fixer.replaceText(jsdocNode, replacement);\n        }, jsdocTag);\n      }\n    } else {\n      report(`Invalid JSDoc tag name \"${tagName}\".`, null, jsdocTag);\n    }\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Reports invalid block tag names.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-tag-names',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          definedTags: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n          jsxTags: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"checkTagNames.js"}