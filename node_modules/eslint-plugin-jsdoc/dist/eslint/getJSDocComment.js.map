{"version":3,"sources":["../../src/eslint/getJSDocComment.js"],"names":["isCommentToken","token","type","getDecorator","node","declaration","decorators","parent","looksLikeExport","astNode","getTSFunctionComment","grandparent","greatGrandparent","greatGreatGrandparent","invokedExpression","Set","allowableCommentNode","getReducedASTNode","sourceCode","has","getCommentsBefore","length","test","findJSDocComment","settings","minLines","maxLines","currentNode","tokenBefore","decorator","getTokenBefore","includeComments","value","charAt","loc","start","line","end","getJSDocComment","reducedNode"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAIC,KAAD,IAAW;AAChC,SAAOA,KAAK,CAACC,IAAN,KAAe,MAAf,IAAyBD,KAAK,CAACC,IAAN,KAAe,OAAxC,IAAmDD,KAAK,CAACC,IAAN,KAAe,SAAzE;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAAA;;AAC7B,SAAO,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,iCAAAA,IAAI,CAAEC,WAAN,iGAAmBC,UAAnB,gFAAgC,CAAhC,OAAsCF,IAAtC,aAAsCA,IAAtC,2CAAsCA,IAAI,CAAEE,UAA5C,qDAAsC,iBAAmB,CAAnB,CAAtC,MACHF,IADG,aACHA,IADG,uCACHA,IAAI,CAAEG,MADH,0EACH,aAAcD,UADX,0DACH,sBAA2B,CAA3B,CADG,CAAP;AAED,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,MAAME,eAAe,GAAG,UAAUC,OAAV,EAAmB;AACzC,SAAOA,OAAO,CAACP,IAAR,KAAiB,0BAAjB,IAA+CO,OAAO,CAACP,IAAR,KAAiB,wBAAhE,IACLO,OAAO,CAACP,IAAR,KAAiB,sBADZ,IACsCO,OAAO,CAACP,IAAR,KAAiB,iBAD9D;AAED,CAHD;;AAKA,MAAMQ,oBAAoB,GAAG,UAAUD,OAAV,EAAmB;AAC9C,QAAM;AAACF,IAAAA;AAAD,MAAWE,OAAjB;AACA,QAAME,WAAW,GAAGJ,MAAM,CAACA,MAA3B;AACA,QAAMK,gBAAgB,GAAGD,WAAW,CAACJ,MAArC;AACA,QAAMM,qBAAqB,GAAGD,gBAAgB,IAAIA,gBAAgB,CAACL,MAAnE,CAJ8C,CAM9C;;AACA,MAAIA,MAAM,CAACL,IAAP,KAAgB,kBAApB,EAAwC;AACtC,WAAOO,OAAP;AACD;;AAED,UAAQE,WAAW,CAACT,IAApB;AACA,SAAK,eAAL;AACA,SAAK,mBAAL;AACA,SAAK,mBAAL;AACA,SAAK,qBAAL;AACE,aAAOS,WAAP;;AACF,SAAK,yBAAL;AACE;AACA,UACEC,gBAAgB,CAACV,IAAjB,KAA0B,oBAD5B,CAGA;AAHA,QAIE;AACA,iBAAOW,qBAAqB,CAACN,MAA7B;AACD,SARH,CAUE;;;AACA,aAAOE,OAAP;;AACF,SAAK,oBAAL;AACE;AACA,UAAIG,gBAAgB,CAACV,IAAjB,KAA0B,kBAA9B,EAAkD;AAChD,eAAOU,gBAAP;AACD;;AAEH;;AACA;AACE;AACA,UAAID,WAAW,CAACT,IAAZ,KAAqB,YAAzB,EAAuC;AACrC;AACA,eAAOO,OAAP;AACD;;AA9BH,GAX8C,CA4C9C;;;AACA,UAAQG,gBAAgB,CAACV,IAAzB;AACA,SAAK,yBAAL;AACE;AACA,UACEW,qBAAqB,CAACX,IAAtB,KAA+B,oBAA/B,IACAW,qBAAqB,CAACN,MAAtB,CAA6BL,IAA7B,KAAsC,qBAFxC,EAGE;AACA,eAAOW,qBAAqB,CAACN,MAA7B;AACD,OAPH,CASE;;;AACA,aAAOE,OAAP;;AACF,SAAK,qBAAL;AACE,aAAOG,gBAAP;;AACF,SAAK,oBAAL;AACE;AACA,UAAIC,qBAAqB,CAACX,IAAtB,KAA+B,qBAAnC,EAA0D;AACxD,eAAOW,qBAAP;AACD;;AAED;;AACF;AACE;AACA,aAAOJ,OAAP;AAvBF;AAyBD,CAtED;;AAwEA,MAAMK,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,gBAAD,EAAmB,wBAAnB,EAA6C,eAA7C,CAAR,CAA1B;AACA,MAAMC,oBAAoB,GAAG,IAAID,GAAJ,CAAQ,CACnC,qBADmC,EAEnC,qBAFmC,EAGnC,kBAHmC,EAInC,UAJmC,EAKnC,gBALmC,EAMnC,eANmC,CAAR,CAA7B;AASA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,iBAAiB,GAAG,UAAUb,IAAV,EAAgBc,UAAhB,EAA4B;AACpD;AACA,MAAI;AAACX,IAAAA;AAAD,MAAWH,IAAf;;AAEA,UAAQA,IAAI,CAACF,IAAb;AACA,SAAK,gBAAL;AACE,aAAOQ,oBAAoB,CAACN,IAAD,CAA3B;;AACF,SAAK,wBAAL;AACA,SAAK,wBAAL;AACA,SAAK,mBAAL;AACA,SAAK,kBAAL;AACA,SAAK,qBAAL;AACE,aAAOI,eAAe,CAACD,MAAD,CAAf,GAA0BA,MAA1B,GAAmCH,IAA1C;;AAEF,SAAK,mBAAL;AACA,SAAK,iBAAL;AACA,SAAK,kBAAL;AACA,SAAK,yBAAL;AACA,SAAK,+BAAL;AACA,SAAK,oBAAL;AACE,UACE,CAACU,iBAAiB,CAACK,GAAlB,CAAsBZ,MAAM,CAACL,IAA7B,CADH,EAEE;AACA,eACE,CAACgB,UAAU,CAACE,iBAAX,CAA6Bb,MAA7B,EAAqCc,MAAtC,IACA,CAAC,YAAYC,IAAZ,CAAiBf,MAAM,CAACL,IAAxB,CADD,IAEA,CAACc,oBAAoB,CAACG,GAArB,CAAyBZ,MAAM,CAACL,IAAhC,CAHH,EAIE;AACAK,UAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;;AAEA,cAAI,CAACA,MAAL,EAAa;AACX;AACD;AACF;;AACD,YAAIA,MAAM,IAAIA,MAAM,CAACL,IAAP,KAAgB,qBAA1B,IAAmDK,MAAM,CAACL,IAAP,KAAgB,SAAvE,EAAkF;AAChF,cAAIK,MAAM,CAACA,MAAP,IAAiBA,MAAM,CAACA,MAAP,CAAcL,IAAd,KAAuB,wBAA5C,EAAsE;AACpE,mBAAOK,MAAM,CAACA,MAAd;AACD;;AAED,iBAAOA,MAAP;AACD;AACF;;AAED,aAAOH,IAAP;;AAEF;AACE,aAAOA,IAAP;AA1CF;AA4CD,CAhDD;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,MAAMmB,gBAAgB,GAAG,CAACd,OAAD,EAAUS,UAAV,EAAsBM,QAAtB,KAAmC;AAC1D,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAuBF,QAA7B;AACA,MAAIG,WAAW,GAAGlB,OAAlB;AACA,MAAImB,WAAW,GAAG,IAAlB;;AAEA,SAAOD,WAAP,EAAoB;AAClB,UAAME,SAAS,GAAG1B,YAAY,CAACwB,WAAD,CAA9B;;AACA,QAAIE,SAAJ,EAAe;AACbF,MAAAA,WAAW,GAAGE,SAAd;AACD;;AACDD,IAAAA,WAAW,GAAGV,UAAU,CAACY,cAAX,CAA0BH,WAA1B,EAAuC;AAACI,MAAAA,eAAe,EAAE;AAAlB,KAAvC,CAAd;;AACA,QAAI,CAACH,WAAD,IAAgB,CAAC5B,cAAc,CAAC4B,WAAD,CAAnC,EAAkD;AAChD,aAAO,IAAP;AACD;;AACD,QAAIA,WAAW,CAAC1B,IAAZ,KAAqB,MAAzB,EAAiC;AAC/ByB,MAAAA,WAAW,GAAGC,WAAd;AACA;AACD;;AACD;AACD;;AAED,MACEA,WAAW,CAAC1B,IAAZ,KAAqB,OAArB,IACA0B,WAAW,CAACI,KAAZ,CAAkBC,MAAlB,CAAyB,CAAzB,MAAgC,GADhC,IAEAN,WAAW,CAACO,GAAZ,CAAgBC,KAAhB,CAAsBC,IAAtB,GAA6BR,WAAW,CAACM,GAAZ,CAAgBG,GAAhB,CAAoBD,IAAjD,IAAyDX,QAFzD,IAGAE,WAAW,CAACO,GAAZ,CAAgBC,KAAhB,CAAsBC,IAAtB,GAA6BR,WAAW,CAACM,GAAZ,CAAgBG,GAAhB,CAAoBD,IAAjD,IAAyDV,QAJ3D,EAKE;AACA,WAAOE,WAAP;AACD;;AAED,SAAO,IAAP;AACD,CA/BD;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,MAAMU,eAAe,GAAG,UAAUpB,UAAV,EAAsBd,IAAtB,EAA4BoB,QAA5B,EAAsC;AAC5D,QAAMe,WAAW,GAAGtB,iBAAiB,CAACb,IAAD,EAAOc,UAAP,CAArC;AAEA,SAAOK,gBAAgB,CAACgB,WAAD,EAAcrB,UAAd,EAA0BM,QAA1B,CAAvB;AACD,CAJD;;;eASec,e","sourcesContent":["/**\n * Obtained originally from {@link https://github.com/eslint/eslint/blob/master/lib/util/source-code.js#L313}\n *\n * @license MIT\n */\n\n/**\n * Checks if the given token is a comment token or not.\n *\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a comment token.\n */\nconst isCommentToken = (token) => {\n  return token.type === 'Line' || token.type === 'Block' || token.type === 'Shebang';\n};\n\nconst getDecorator = (node) => {\n  return node?.declaration?.decorators?.[0] || node?.decorators?.[0] ||\n      node?.parent?.decorators?.[0];\n};\n\n/**\n * Check to see if its a ES6 export declaration.\n *\n * @param {ASTNode} astNode An AST node.\n * @returns {boolean} whether the given node represents an export declaration.\n * @private\n */\nconst looksLikeExport = function (astNode) {\n  return astNode.type === 'ExportDefaultDeclaration' || astNode.type === 'ExportNamedDeclaration' ||\n    astNode.type === 'ExportAllDeclaration' || astNode.type === 'ExportSpecifier';\n};\n\nconst getTSFunctionComment = function (astNode) {\n  const {parent} = astNode;\n  const grandparent = parent.parent;\n  const greatGrandparent = grandparent.parent;\n  const greatGreatGrandparent = greatGrandparent && greatGrandparent.parent;\n\n  // istanbul ignore if\n  if (parent.type !== 'TSTypeAnnotation') {\n    return astNode;\n  }\n\n  switch (grandparent.type) {\n  case 'ClassProperty':\n  case 'TSDeclareFunction':\n  case 'TSMethodSignature':\n  case 'TSPropertySignature':\n    return grandparent;\n  case 'ArrowFunctionExpression':\n    // istanbul ignore else\n    if (\n      greatGrandparent.type === 'VariableDeclarator'\n\n    // && greatGreatGrandparent.parent.type === 'VariableDeclaration'\n    ) {\n      return greatGreatGrandparent.parent;\n    }\n\n    // istanbul ignore next\n    return astNode;\n  case 'FunctionExpression':\n    // istanbul ignore else\n    if (greatGrandparent.type === 'MethodDefinition') {\n      return greatGrandparent;\n    }\n\n  // Fallthrough\n  default:\n    // istanbul ignore if\n    if (grandparent.type !== 'Identifier') {\n      // istanbul ignore next\n      return astNode;\n    }\n  }\n\n  // istanbul ignore next\n  switch (greatGrandparent.type) {\n  case 'ArrowFunctionExpression':\n    // istanbul ignore else\n    if (\n      greatGreatGrandparent.type === 'VariableDeclarator' &&\n      greatGreatGrandparent.parent.type === 'VariableDeclaration'\n    ) {\n      return greatGreatGrandparent.parent;\n    }\n\n    // istanbul ignore next\n    return astNode;\n  case 'FunctionDeclaration':\n    return greatGrandparent;\n  case 'VariableDeclarator':\n    // istanbul ignore else\n    if (greatGreatGrandparent.type === 'VariableDeclaration') {\n      return greatGreatGrandparent;\n    }\n\n    // Fallthrough\n  default:\n    // istanbul ignore next\n    return astNode;\n  }\n};\n\nconst invokedExpression = new Set(['CallExpression', 'OptionalCallExpression', 'NewExpression']);\nconst allowableCommentNode = new Set([\n  'VariableDeclaration',\n  'ExpressionStatement',\n  'MethodDefinition',\n  'Property',\n  'ObjectProperty',\n  'ClassProperty',\n]);\n\n/* eslint-disable complexity */\n/**\n * Reduces the provided node to the appropriate node for evaluating JSDoc comment status.\n *\n * @param {ASTNode} node An AST node.\n * @param {SourceCode} sourceCode The ESLint SourceCode.\n * @returns {ASTNode} The AST node that can be evaluated for appropriate JSDoc comments.\n * @private\n */\nconst getReducedASTNode = function (node, sourceCode) {\n  /* eslint-enable complexity */\n  let {parent} = node;\n\n  switch (node.type) {\n  case 'TSFunctionType':\n    return getTSFunctionComment(node);\n  case 'TSInterfaceDeclaration':\n  case 'TSTypeAliasDeclaration':\n  case 'TSEnumDeclaration':\n  case 'ClassDeclaration':\n  case 'FunctionDeclaration':\n    return looksLikeExport(parent) ? parent : node;\n\n  case 'TSDeclareFunction':\n  case 'ClassExpression':\n  case 'ObjectExpression':\n  case 'ArrowFunctionExpression':\n  case 'TSEmptyBodyFunctionExpression':\n  case 'FunctionExpression':\n    if (\n      !invokedExpression.has(parent.type)\n    ) {\n      while (\n        !sourceCode.getCommentsBefore(parent).length &&\n        !/Function/u.test(parent.type) &&\n        !allowableCommentNode.has(parent.type)\n      ) {\n        parent = parent.parent;\n\n        if (!parent) {\n          break;\n        }\n      }\n      if (parent && parent.type !== 'FunctionDeclaration' && parent.type !== 'Program') {\n        if (parent.parent && parent.parent.type === 'ExportNamedDeclaration') {\n          return parent.parent;\n        }\n\n        return parent;\n      }\n    }\n\n    return node;\n\n  default:\n    return node;\n  }\n};\n\n/**\n * Checks for the presence of a JSDoc comment for the given node and returns it.\n *\n * @param {ASTNode} astNode The AST node to get the comment for.\n * @returns {Token|null} The Block comment token containing the JSDoc comment\n *    for the given node or null if not found.\n * @private\n */\nconst findJSDocComment = (astNode, sourceCode, settings) => {\n  const {minLines, maxLines} = settings;\n  let currentNode = astNode;\n  let tokenBefore = null;\n\n  while (currentNode) {\n    const decorator = getDecorator(currentNode);\n    if (decorator) {\n      currentNode = decorator;\n    }\n    tokenBefore = sourceCode.getTokenBefore(currentNode, {includeComments: true});\n    if (!tokenBefore || !isCommentToken(tokenBefore)) {\n      return null;\n    }\n    if (tokenBefore.type === 'Line') {\n      currentNode = tokenBefore;\n      continue;\n    }\n    break;\n  }\n\n  if (\n    tokenBefore.type === 'Block' &&\n    tokenBefore.value.charAt(0) === '*' &&\n    currentNode.loc.start.line - tokenBefore.loc.end.line >= minLines &&\n    currentNode.loc.start.line - tokenBefore.loc.end.line <= maxLines\n  ) {\n    return tokenBefore;\n  }\n\n  return null;\n};\n\n/**\n * Retrieves the JSDoc comment for a given node.\n *\n * @param {SourceCode} sourceCode The ESLint SourceCode\n * @param {ASTNode} node The AST node to get the comment for.\n * @param {object} settings The settings in context\n * @returns {Token|null} The Block comment token containing the JSDoc comment\n *    for the given node or null if not found.\n * @public\n */\nconst getJSDocComment = function (sourceCode, node, settings) {\n  const reducedNode = getReducedASTNode(node, sourceCode);\n\n  return findJSDocComment(reducedNode, sourceCode, settings);\n};\n\nexport {\n  getReducedASTNode, getJSDocComment, getDecorator, findJSDocComment,\n};\nexport default getJSDocComment;\n"],"file":"getJSDocComment.js"}